<!doctype html>
<html class="no-js">

<head>
    <meta charset="utf-8">
    <title>StoryQuest Preview</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
    <!-- build:css(.) css/vendor-preview.css -->
    <link rel="stylesheet" href="bower_components/font-awesome/css/font-awesome.css" />
    <!-- endbuild -->
    <!-- build:js(.) js/vendor-preview.js -->
    <script src="bower_components/jquery/dist/jquery.js"></script>
    <script src="bower_components/engine.io/engine.io.js"></script>
    <!-- endbuild -->
    <style>
        html, body {
            width:100%;
            height:100%;
            margin:0;
            padding:0;
            background:#ffffff;
            overflow: hidden;
        }
        div, iframe#preview {
            width:100%;
            height:100%;
            margin:0;
            padding:0;
            border:0;
        }
    </style>
    <script>
        /*
         input data format:
         { giveItems: [ "id1", "id2" ], removeItems: [ "id1", "id2" ], playerData: [ { key: "key", value: "value" } ] }

         output data format:
         { items: itemAPI.items, ownedItems: itemAPI.ownedItems, playerData: [ { key: "key", value: "value", displayName: "displayName" } ]}

         message format:
         { type: "frame|node|load|getData|setData", node: node, data: see above }
         */

        var projectId = null;
        var authtoken = null;

        $(document).ready(function() {

            // retrieve basic data from url
            projectId = queryGetParam("projectId");
            authtoken = queryGetParam("authtoken");

            // load preview index in iframe
            $("#preview").attr("src", "/api/p/" + projectId + "/index.html?authtoken="+ authtoken);

            // initialize WSS connection
            $("#preview").load(function() {
                console.log("Preview frame loaded, initializing socket connection..");
                var wssHost = document.location.hostname;
                var wssProtocol = (document.location.protocol=="http:")?"ws":"wss";
                var wssPort = document.location.port;
                if (wssPort!="")
                    wssPort = ":" + wssPort;
                var url = wssProtocol +"://" +wssHost + wssPort +
                        "/?project=" + projectId + "&authtoken=" + authtoken + "&type=preview";
                console.log("Connecting to remote socket: " + url);
                var socket = new eio.Socket(url);

                socket.on("open", function() {
                    console.log("Connected to socket service.");
                    socket.on("close", function() { console.log("Socket service connection closed."); });
                    socket.on("message", function(data) {
                        console.log("Received socket message: " + data);
                        var message = JSON.parse(data);
                        if (message.type=="frame")
                            reloadPreview();
                        else if (message.type=="node")
                            loadNodeData(message.node);
                        else if (message.type=="load")
                            loadNode(message.node);
                        else if (message.type=="getData")
                            sendData(socket);
                        else if (message.type=="setData")
                            setData(socket, message);
                    });
                });
            });

        });

        function queryGetParam(val) {
            var result = "Not found",
                    tmp = [];
            location.search
                    .substr(1)
                    .split("&")
                    .forEach(function (item) {
                        tmp = item.split("=");
                        if (tmp[0] === val) result = decodeURIComponent(tmp[1]);
                    });
            return result;
        }

        function preview() {
            return document.getElementById("preview").contentWindow;
        }

        function loadStationInPreview(type, stationId) {
            console.log("Loading station " + stationId + " / " + type);
            $("#preview").attr("src", "/api/p/" + projectId + "/index.html?station=" + stationId);
        }

        function reloadPreview() {
            console.log("Reloading Preview");
            document.getElementById("preview").contentDocument.location.reload(true);
        }

        function loadNodeData(node) {
            console.log("Sideloading data for node " + node.id);
            if (preview().sideloadContent)
                preview().sideloadContent(node.id, node, node.text[0].text);
        }

        function loadNode(node) {
            loadStationInPreview(node.type, node.id);
        }

        function getData() {
            console.log("Retrieving preview data.");
            var data = { type: "setData", items: preview().itemAPI.items, ownedItems: preview().itemAPI.ownedItems, playerData: []};
            for (var i=0; i<preview().playerDataAPI.length; i++)
                data.playerData.push({
                    key: preview().playerDataAPI[i].key,
                    value: preview().playerDataAPI[i].getter(),
                    displayName: preview().playerDataAPI[i].displayName
                });
            return data;
        }

        function setData(socket, data) {
            console.log("Setting preview data: " + JSON.stringify(data));
            if (preview().itemAPI && data.giveItems)
                for (var i=0; i<data.giveItems.length; i++)
                    preview().itemAPI.addItemToCharacter(data.giveItems[i]);
            if (preview().itemAPI && data.removeItems)
                for (var k=0; k<data.removeItems.length; k++)
                    preview().itemAPI.removeItemFromCharacter(data.removeItems[k]);
            if (preview().playerDataAPI && data.playerData) {
                for (var j=0; j<data.playerData.length; j++)
                    if (getSetter(data.playerData[j].key))
                        getSetter(data.playerData[j].key)(data.playerData[j].value);
            }
            sendData(socket);
        }

        function getSetter(attributeName) {
            if (!preview().playerDataAPI)
                return null;
            for (var i=0; i<preview().playerDataAPI.length; i++)
                if (preview().playerDataAPI[i].key==attributeName)
                    return preview().playerDataAPI[i].setter;
        }

        function sendData(socket) {
            socket.send(JSON.stringify(getData()));
        }

        function setSize(index) {
            switch(index) {
                case 0: window.resizeTo(800, 1280); break;
                case 1: window.resizeTo(480, 800); break;
            }
        }

        function setOrientation(index) {
            if (index===0 && (window.outerWidth>window.outerHeight) || index===1 && (window.outerWidth<window.outerHeight)) {
                window.resizeTo(window.outerHeight, window.outerWidth);
            }
        }
    </script>
</head>

<body>
    <div>
        <iframe id="preview"></iframe>
    </div>
</body>

</html>