doctype html
html.bg-info
    head
        meta(charset="UTF-8")
        title Node Tree
        meta(content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no", name="viewport")
        script(src="../bower_components/jquery/dist/jquery.min.js")
        script(src="../bower_components/sigma/build/sigma.min.js")
        script(src="../bower_components/sigma/build/plugins/sigma.plugins.dragNodes.min.js")
        script(src="../bower_components/sigma/build/plugins/sigma.layout.forceAtlas2.min.js")
        script(src="../bower_components/sigma/build/plugins/sigma.renderers.customShapes.min.js")
        style.
            html, body {
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
            }
            #tree {
            }
    body
        script.
            var eventListener = null;
            function setListener(listener) {
                eventListener = listener;
            }

            $(document).ready(function() {

                // resize canvas to window size
                $("#tree").css("width", window.innerWidth);
                $("#tree").css("height", window.innerHeight);

                // Add neighbors method to the graph model
                sigma.classes.graph.addMethod('neighbors', function(nodeId) {
                    var k;
                    var neighbors = {};
                    var index = this.allNeighborsIndex[nodeId] || {};
                    for (k in index)
                        neighbors[k] = this.nodesIndex[k];
                    return neighbors;
                });

                // render tree
                sigma.renderers.def = sigma.renderers.canvas;
                var s = new sigma({
                    graph: !{graph},
                    container: 'tree'
                });
                sigma.plugins.dragNodes(s, s.renderers[0]);
                CustomShapes.init(s);
                s.refresh();
                //s.startForceAtlas2();

                // We first need to save the original colors
                s.graph.nodes().forEach(function(n) {
                    n.originalColor = n.color;
                });
                s.graph.edges().forEach(function(e) {
                    e.originalColor = e.color;
                });

                // When a node is clicked, we check for each node
                // if it is a neighbor of the clicked one. If not,
                // we set its color as grey, and else, it takes its
                // original color.
                // We do the same for the edges, and we only keep
                // edges that have both extremities colored.
                s.bind('clickNode', function(e) {
                    var nodeId = e.data.node.id,
                        toKeep = s.graph.neighbors(nodeId);
                    toKeep[nodeId] = e.data.node;

                    s.graph.nodes().forEach(function(n) {
                        if (toKeep[n.id])
                            n.color = n.originalColor;
                        else
                            n.color = '#eee';
                    });

                    s.graph.edges().forEach(function(e) {
                        if (toKeep[e.source] && toKeep[e.target])
                            e.color = e.originalColor;
                        else
                            e.color = '#eee';
                    });

                    // Since the data has been modified, we need to
                    // call the refresh method to make the colors
                    // update effective.
                    s.refresh();
                });

                // When the stage is clicked, we just color each
                // node and edge with its original color.
                s.bind('clickStage', function(e) {
                    s.graph.nodes().forEach(function(n) {
                        n.color = n.originalColor;
                    });

                    s.graph.edges().forEach(function(e) {
                        e.color = e.originalColor;
                    });

                    // Same as in the previous event:
                    s.refresh();
                });

                // bind events, other possible values: overNode outNode doubleClickNode
                s.bind('clickNode', function(e) {
                    if (eventListener)
                        eventListener(e.data.node.id);
                });
                s.bind('clickStage', function(e) {
                    // NOP
                });
                s.bind('doubleClickStage', function(e) {
                    // NOP
                });
            });
    if isWindow
        div(style="width:100%;color:grey;text-align:center;font-family:sans;font-size:0.7em") WARNING: this preview must be refreshed manually by pressing F5. Please note that a preview window or device can <b>not</b> be controlled from this tree display.
    div(id="tree")

